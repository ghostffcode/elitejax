{"version":3,"sources":["webpack:///elitejax.min.js","webpack:///webpack/bootstrap ad4c9328ead270f1c7e8","webpack:///./src/index.es6"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","_classCallCheck","instance","Constructor","TypeError","_typeof","Symbol","iterator","obj","constructor","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","Elitejax","this","config","window","callback","ajaxForm","getEl","value","name","arguments","undefined","defaultConfig","async","cType","resType","data","console","log","prop","res","elem","document","querySelectorAll","Array","from","forEach","val","getAttribute","push","formEl","num","valid","validInput","inputEl","toLowerCase","ex","cbName","str","xml","parseXml","DOMParser","xmlStr","parseFromString","ActiveXObject","xmlDoc","loadXML","el","_this","v","addEventListener","e","preventDefault","action","method","toUpperCase","getElVal","elements","ajaxIt","configure","_config$name","xhttp","XMLHttpRequest","onreadystatechange","readyState","status","response","responseText","JSON","parse","xmlParser","open","params","setRequestHeader","send","script","createElement","type","Date","now","src","getElementsByTagName","appendChild","ej","elitejax"],"mappings":"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","file":"elitejax.min.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar Elitejax = function () {\n\t  // get config via object for elitejax constructor\n\t  function Elitejax() {\n\t    _classCallCheck(this, Elitejax);\n\t\n\t    this.config = {};\n\t    window.callback = {}; // add callback object to window\n\t    this.ajaxForm(this.getEl());\n\t  }\n\t\n\t  // function to add configurations to selected forms\n\t\n\t\n\t  _createClass(Elitejax, [{\n\t    key: 'configure',\n\t    value: function configure(name) {\n\t      var config = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\t\n\t      // set default configuration\n\t      var defaultConfig = {\n\t        async: true,\n\t        cType: 'application/json',\n\t        resType: 'json',\n\t        callback: function callback(data) {\n\t          console.log(data);\n\t        }\n\t      };\n\t\n\t      for (var prop in defaultConfig) {\n\t        if (config[prop] === undefined) {\n\t          config[prop] = defaultConfig[prop];\n\t        }\n\t      }\n\t\n\t      this.config[name] = config;\n\t      return this.config[name];\n\t    }\n\t\n\t    // gets elements that has been marked for elitejax\n\t\n\t  }, {\n\t    key: 'getEl',\n\t    value: function getEl() {\n\t      var res = [];\n\t      var elem = document.querySelectorAll('form');\n\t      Array.from(elem).forEach(function (val) {\n\t        if (val.getAttribute('data-elitejax') !== null) {\n\t          res.push(val);\n\t        }\n\t      });\n\t      return res;\n\t    }\n\t\n\t    // gets value from form elements\n\t\n\t  }, {\n\t    key: 'getElVal',\n\t    value: function getElVal(formEl) {\n\t      var res = {};\n\t      var num = formEl.length;\n\t      for (var i = 0; i < num; i++) {\n\t        var valid = this.validInput(formEl[i]);\n\t        if (valid[0]) {\n\t          res[valid[1]] = valid[2];\n\t        }\n\t      }\n\t      return res;\n\t    }\n\t\n\t    // validate user inputs according to input types\n\t\n\t  }, {\n\t    key: 'validInput',\n\t    value: function validInput(inputEl) {\n\t      var val = [true, '', ''];\n\t      var name = inputEl.name.toLowerCase();\n\t      var value = inputEl.value;\n\t      var ex = inputEl.getAttribute('data-elitejax-x');\n\t      if (name !== '' && value !== '' && name !== 'submit' && value !== 'submit' && ex === null) {\n\t        val[1] = name;\n\t        val[2] = value;\n\t      } else {\n\t        val[0] = false;\n\t      }\n\t      return val;\n\t    }\n\t\n\t    // convert object to url parameter\n\t\n\t  }, {\n\t    key: 'params',\n\t    value: function params() {\n\t      var obj = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\t      var resType = arguments.length <= 1 || arguments[1] === undefined ? '' : arguments[1];\n\t      var cbName = arguments.length <= 2 || arguments[2] === undefined ? '' : arguments[2];\n\t\n\t      var str = '';\n\t      str = resType === 'jsonp' ? '?' + str + 'callback=' + cbName : str;\n\t      for (var key in obj) {\n\t        if (str !== '') {\n\t          str += '&';\n\t        }\n\t        str += key + '=' + obj[key];\n\t      }\n\t      return str;\n\t    }\n\t  }, {\n\t    key: 'xmlParser',\n\t    value: function xmlParser(xml) {\n\t      var parseXml = null;\n\t      if (window.DOMParser) {\n\t        parseXml = function parseXml(xmlStr) {\n\t          return new window.DOMParser().parseFromString(xmlStr, 'text/xml');\n\t        };\n\t      } else if (_typeof(window.ActiveXObject) !== undefined && new window.ActiveXObject('Microsoft.XMLDOM')) {\n\t        parseXml = function parseXml(xmlStr) {\n\t          var xmlDoc = new window.ActiveXObject('Microsoft.XMLDOM');\n\t          xmlDoc.async = 'false';\n\t          xmlDoc.loadXML(xmlStr);\n\t          return xmlDoc;\n\t        };\n\t      } else {\n\t        parseXml = function parseXml() {\n\t          return null;\n\t        };\n\t      }\n\t\n\t      return parseXml(xml);\n\t    }\n\t  }, {\n\t    key: 'ajaxForm',\n\t    value: function ajaxForm(el) {\n\t      var _this = this;\n\t\n\t      // Loop through all the elements\n\t      el.forEach(function (v, i) {\n\t        // add on {listen} event listener to all of them\n\t        v.addEventListener('submit', function (e) {\n\t          e.preventDefault(); // stop submission\n\t          var name = e.target.getAttribute('name');\n\t          var action = e.target.getAttribute('action');\n\t          var method = e.target.getAttribute('method').toUpperCase();\n\t          var data = _this.getElVal(e.target.elements); // data for ajax\n\t          // build complete configuration\n\t          _this.ajaxIt(action, method, data, name);\n\t        });\n\t      });\n\t    }\n\t  }, {\n\t    key: 'ajaxIt',\n\t    value: function ajaxIt(action, method, data) {\n\t      var name = arguments.length <= 3 || arguments[3] === undefined ? null : arguments[3];\n\t\n\t      if (this.config[name] === undefined || this.config[name] === null) {\n\t        this.configure(name);\n\t      }\n\t      // destructure configuration for given form\n\t      var _config$name = this.config[name];\n\t      var async = _config$name.async;\n\t      var cType = _config$name.cType;\n\t      var resType = _config$name.resType;\n\t      var callback = _config$name.callback;\n\t      // get AJAX ready\n\t\n\t      var xhttp = new XMLHttpRequest();\n\t      xhttp.onreadystatechange = function () {\n\t        if (this.readyState === 4 && this.status === 200) {\n\t          var response = this.responseText;\n\t          if (resType === 'json') {\n\t            response = JSON.parse(response);\n\t            callback(response);\n\t          } else if (resType === 'xml') {\n\t            response = this.xmlParser(response);\n\t            callback(response);\n\t          } else {\n\t            callback(response);\n\t          }\n\t        }\n\t      };\n\t      // make request\n\t      if (method === 'GET' && resType !== 'jsonp') {\n\t        xhttp.open(method, action + '?' + this.params(data), async);\n\t        xhttp.setRequestHeader('Content-type', cType);\n\t        xhttp.send();\n\t      } else if (method === 'GET' && resType === 'jsonp') {\n\t        var script = document.createElement('script');\n\t        script.type = 'text/javascript';\n\t        // create random callback name\n\t        var cbName = 'ej_' + Date.now();\n\t        // create add callback function to global callback object\n\t        window.callback[cbName] = callback;\n\t        // send data and callback function name to be added as parameters\n\t        script.src = action + this.params(data, resType, 'callback.' + cbName);\n\t        document.getElementsByTagName('head')[0].appendChild(script);\n\t      } else {\n\t        xhttp.open(method, action, async);\n\t        xhttp.setRequestHeader('Content-type', cType);\n\t        xhttp.send(this.params(data));\n\t      }\n\t    }\n\t  }]);\n\t\n\t  return Elitejax;\n\t}();\n\t\n\tvar ej = function ej() {\n\t  return new Elitejax();\n\t};\n\t\n\t// make module available to browser\n\twindow.ej = window.elitejax = ej();\n\t\n\t// call our class instanciator, whatever the name is\n\tej;\n\n/***/ }\n/******/ ]);\n\n\n/** WEBPACK FOOTER **\n ** elitejax.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap ad4c9328ead270f1c7e8\n **/","'use strict';\n\nclass Elitejax {\n  // get config via object for elitejax constructor\n  constructor () {\n    this.config = {};\n    window.callback = {}; // add callback object to window\n    this.ajaxForm(this.getEl());\n  }\n\n  // function to add configurations to selected forms\n  configure (name, config = {}) {\n    // set default configuration\n    const defaultConfig = {\n      async: true,\n      cType: 'application/json',\n      resType: 'json',\n      callback: function (data) {\n        console.log(data);\n      }\n    };\n\n    for (let prop in defaultConfig) {\n      if (config[prop] === undefined) {\n        config[prop] = defaultConfig[prop];\n      }\n    }\n\n    this.config[name] = config;\n    return this.config[name];\n  }\n\n  // gets elements that has been marked for elitejax\n  getEl () {\n    const res = [];\n    const elem = document.querySelectorAll('form');\n    Array.from(elem).forEach((val) => {\n      if (val.getAttribute('data-elitejax') !== null) {\n        res.push(val);\n      }\n    });\n    return res;\n  }\n\n  // gets value from form elements\n  getElVal (formEl) {\n    const res = {};\n    const num = formEl.length;\n    for (let i = 0; i < num; i++) {\n      const valid = this.validInput(formEl[i]);\n      if (valid[0]) {\n        res[valid[1]] = valid[2];\n      }\n    }\n    return res;\n  }\n\n  // validate user inputs according to input types\n  validInput (inputEl) {\n    const val = [true, '', ''];\n    const name = inputEl.name.toLowerCase();\n    const value = inputEl.value;\n    const ex = inputEl.getAttribute('data-elitejax-x');\n    if (name !== '' && value !== '' && name !== 'submit' && value !== 'submit' && ex === null) {\n      val[1] = name;\n      val[2] = value;\n    } else {\n      val[0] = false;\n    }\n    return val;\n  }\n\n  // convert object to url parameter\n  params (obj = {}, resType = '', cbName = '') {\n    var str = '';\n    str = (resType === 'jsonp') ? `?${str}callback=${cbName}` : str;\n    for (var key in obj) {\n        if (str !== '') {\n            str += '&';\n        }\n        str += `${key}=${obj[key]}`;\n    }\n    return str;\n  }\n\n  xmlParser(xml) {\n    let parseXml = null;\n    if (window.DOMParser) {\n      parseXml = function(xmlStr) {\n        return (new window.DOMParser()).parseFromString(xmlStr, 'text/xml');\n      };\n    } else if (typeof window.ActiveXObject !== undefined && new window.ActiveXObject('Microsoft.XMLDOM')) {\n      parseXml = function(xmlStr) {\n        var xmlDoc = new window.ActiveXObject('Microsoft.XMLDOM');\n        xmlDoc.async = 'false';\n        xmlDoc.loadXML(xmlStr);\n        return xmlDoc;\n      };\n    } else {\n      parseXml = function() { return null; };\n    }\n\n    return parseXml(xml);\n  }\n\n  ajaxForm (el) {\n    // Loop through all the elements\n    el.forEach((v, i) => {\n      // add on {listen} event listener to all of them\n      v.addEventListener('submit', (e) => {\n        e.preventDefault(); // stop submission\n        let name = e.target.getAttribute('name');\n        let action = e.target.getAttribute('action');\n        let method = e.target.getAttribute('method').toUpperCase();\n        let data = this.getElVal(e.target.elements); // data for ajax\n        // build complete configuration\n        this.ajaxIt(action, method, data, name);\n      });\n    });\n  }\n\n  ajaxIt (action, method, data, name = null) {\n    if (this.config[name] === undefined || this.config[name] === null) {\n      this.configure(name);\n    }\n    // destructure configuration for given form\n    var { async, cType, resType, callback } = this.config[name];\n    // get AJAX ready\n    var xhttp = new XMLHttpRequest();\n    xhttp.onreadystatechange = function() {\n      if (this.readyState === 4 && this.status === 200) {\n        let response = this.responseText;\n        if (resType === 'json') {\n          response = JSON.parse(response);\n          callback(response);\n        } else if (resType === 'xml') {\n          response = this.xmlParser(response);\n          callback(response);\n        } else {\n          callback(response);\n        }\n      }\n    };\n    // make request\n    if (method === 'GET' && resType !== 'jsonp') {\n      xhttp.open(method, action + '?' + this.params(data), async);\n      xhttp.setRequestHeader('Content-type', cType);\n      xhttp.send();\n    } else if (method === 'GET' && resType === 'jsonp') {\n      const script = document.createElement('script');\n      script.type = 'text/javascript';\n      // create random callback name\n      const cbName = `ej_${Date.now()}`;\n      // create add callback function to global callback object\n      window.callback[cbName] = callback;\n      // send data and callback function name to be added as parameters\n      script.src = action + this.params(data, resType, `callback.${cbName}`);\n      document.getElementsByTagName('head')[0].appendChild(script);\n    } else {\n      xhttp.open(method, action, async);\n      xhttp.setRequestHeader('Content-type', cType);\n      xhttp.send(this.params(data));\n    }\n  }\n\n}\n\nlet ej = () => {\n  return new Elitejax();\n};\n\n// make module available to browser\nwindow.ej = window.elitejax = ej();\n\n// call our class instanciator, whatever the name is\nej;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/index.es6\n **/"],"sourceRoot":""}